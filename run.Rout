
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #' ---
> #' title: "RAI Main Analysis"
> #' author: "Wilson, Bokov, Shireman"
> #' date: "08/15/2017"
> #' ---
> #' 
> #' Please read this file through before trying to run it. The comments tell
> #' you what you need to edit in order to proceed.
> #' 
> #' ## Load libraries
> #+ warning=FALSE, message=FALSE
> rq_libs <- c('compiler'                            # just-in-time compilation
+              ,'survival','MASS','Hmisc','zoo'      # various analysis methods
+              ,'readr','dplyr','stringr','magrittr' # data manipulation & piping
+              ,'ggplot2','ggfortify','grid','GGally'# plotting
+              ,'stargazer','broom');                # table formatting
> rq_installed <- sapply(rq_libs,require,character.only=T);
Loading required package: compiler
Loading required package: survival
Loading required package: MASS
Loading required package: Hmisc
Loading required package: lattice
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, round.POSIXt, trunc.POSIXt, units

Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: readr
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:Hmisc’:

    combine, src, summarize

The following object is masked from ‘package:MASS’:

    select

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: stringr
Loading required package: magrittr
Loading required package: ggfortify
Loading required package: grid
Loading required package: GGally

Attaching package: ‘GGally’

The following object is masked from ‘package:dplyr’:

    nasa

Loading required package: stargazer

Please cite as: 

 Hlavac, Marek (2015). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2. http://CRAN.R-project.org/package=stargazer 

Loading required package: broom
Warning messages:
1: replacing previous import by ‘tibble::as_tibble’ when loading ‘ggfortify’ 
2: replacing previous import by ‘utils::capture.output’ when loading ‘GGally’ 
3: replacing previous import by ‘utils::head’ when loading ‘GGally’ 
4: replacing previous import by ‘utils::installed.packages’ when loading ‘GGally’ 
5: replacing previous import by ‘utils::str’ when loading ‘GGally’ 
> rq_need <- names(rq_installed[!rq_installed]);
> if(length(rq_need)>0) install.packages(rq_need,repos='https://cran.rstudio.com/',dependencies = T);
> sapply(rq_need,require,character.only=T);
named list()
> #' Turn JIT to max: pre-compile all closures, `for`, `while`, and `repeat` loops
> enableJIT(3);
[1] 0
> #' ## Load local config file
> #' 
> #' Please edit the file referenced below, it has instructions in the 
> #' comments.
> source('./config.R');
> #' Please edit the file referenced below, it has instructions in the
> #' comments
> source('./metadata.R');
> #' This file has some possible useful functions. You might not need to edit
> #' it but should read it.
> source('./functions.R');
> #'
> #' ## Set generic variables
> session <- 'session.rdata';
> 
> #' ## Load data if it exists 
> #' 
> #' (useful later, right now don't bother saving sessions)
> if(session %in% list.files()) load(session);
> #' Load your data. Notice that we're using `read_csv()` from the readr library.
> #' It is a little smarter than the built-in `read.csv()`
> dat0 <- read_csv(inputdata,na='');
Parsed with column specification:
cols(
  `INCOME_FINAL	IDN_MRN	CASE_NUMBER	LMRN_VISIT	DT_BIRTH	AGE_AT_TIME_SURG	GENDER	RACE	HISPANIC_ETHNICITY	CPT_CODE	CPT_DESCRIPTN	IN_OUT_PATIENT_STATUS	ELECTIVE_SURG	ORIGIN_STATUS	HOSPITAL_ADMISSN_DT	OPERATN_DT	PRINCIPAL_ANESTHESIA_TECHNIQUE	HEIGHT	HEIGHT_UNIT	HEIGHT_UNKNOWN	WEIGHT	WEIGHT_UNIT	WEIGHT_UNKNOWN	BMI	DIABETES_MELLITUS	CURRENT_SMOKER_WITHIN_1_YEAR	DYSPNEA	FUNCTNAL_HEATH_STATUS	VENT_DEPENDENT	HISTORY_SEVERE_COPD	ASCITES_30_DY_PRIOR_SURG	CHR_30_DY_PRIOR_SURG	HYPERTENSN_REQ_MEDICATN	ACUTE_RENAL_FAILURE	CURRENTLY_DIALYSIS	DISSEMINATED_CANCER	OPEN_WOUND	STEROID_IMMUNOSUPP	X_LOSS_BW_6_MONTHS_PRIOR_SURG	BLEEDING_DISORDER	PREOP_TNSF_RBC_72H_PRIOR_SURG	SEPSIS_SIRS_SEPSIS_SEPSHK_48H	ALL_PRE_OP_LABS_UNKNOWN	SERUM_SODIUM	SERUM_SODIUM_DT	BUN	BUN_DT	SERUM_CREATININE	SERUM_CREATININE_DT	ALBUMIN	ALBUMIN_DT	TOTAL_BILIRUBIN	TOTAL_BILIRUBIN_DT	AST_SGOT	AST_SGOT_DT	ALKALINE_PHOSPHATASE	ALKALINE_PHOSPHATASE_DT	WBC	WBC_DT	HEMATOCRIT	HEMATOCRIT_DT	PLATELET_COUNT	PLATELET_COUNT_DT	INR	INR_DT	PTT	PTT_DT	EMERGENCY_CASE	WOUND_CLASS	SURG_WOUND_S_CLOSURE	ASA_CLASS	PROC_SURG_START	PROC_SURG_FINISH	DURATN_SURG_PROC_MINUTES	OTHER_PROC	OTHER_PROC_CPT	CONCURRENT_PROC	CONCURRENT_PROC_CPT	POSTOP_SI_SSI	POSTOP_SI_SSI_PATOS	POSTOP_DEEP_INCISNAL_SSI	POSTOP_DEEP_INCISNAL_SSI_PATOS	POSTOP_ORGAN_SPACE_SSI	POSTOP_ORGAN_SPACE_SSI_PATOS	POSTOP_WOUND_DISRUPTN	POSTOP_PNEUMONIA	POSTOP_PNEUMONIA_PATOS	POSTOP_UNPL_INTUBATN	POSTOP_PULMONARY_EMBOLISM	POSTOP_VENT_48_HR	POSTOP_VENT_48_HR_PATOS	POSTOP_PROG_RENAL_INS	POSTOP_ACUTE_RENAL_FAILURE	POSTOP_UTI	POSTOP_UTI_PATOS	POSTOP_CVA	POSTOP_CARDIAC_ARREST_REQ_CPR	POSTOP_MI	POSTOP_TRANSF_INTRAOP_72H_SURG	TOTAL_BLOOD_TRANSFUSED_UNITS	DVT	POSTOP_C_DIFF	TYPE_C_DIFF_TEST_PERFORMED	RESULT_C_DIFF_TEST	TREATMENT_CDIFF	C_DIFF_LOOSE_STOOL	POSTOP_SEPSIS	POSTOP_SEPSIS_PATOS	POSTOP_SEPSHK	POSTOP_SEPSHK_PATOS	ACUTE_HOSPITAL_DISCHARGE_DT	HOSPITAL_LENGTH_STAY	HOSPITAL_DISCHARGE_DESTINATN	POSTOP_ICD9_CODE	POSTOP_ICD9_DESCRIPTN	POSTOP_ICD10_CODE	POSTOP_ICD10_DESCRIPTN	STILL_HOSPITAL_30_DY	POSTOP_DEATH_30_DY_PROC	POSTOP_DEATH_GT_30_DY_PROC	DT_DEATH	DT_DEATH_UNKNOWN	END_LIFE_WITHDRAWAL_CARE	READM_30_DY	DT_FIRST_READM	UNPL_READM	READM_LIKELY_REL_PR_PROC	READM_LIKELY_UNREL_PR_PROC	FIRST_UNP_RET_OR	DT_FIRST_UNPL_RET_OR	FIRST_UNPL_RET_PROC	FIRST_UNPL_RET_CPT	FIRST_UNPL_RET_REL_PR_PROC	SECOND_UNP_RET_OR	DT_SECOND_UNP_RET	SECOND_UNPL_RET_PROC	SECOND_UNPL_RET_CPT	SECOND_UNPL_RET_REL_PR_PROC	MORE_THAN_2_UNP_RET_OR	X30_DY_F_U_COMPLETE	FU_DY	ROBOTIC_ASSISTED` = col_character()
)
Warning: 5655 parsing failures.
row # A tibble: 5 x 5 col     row   col  expected    actual expected   <int> <chr>     <chr>     <chr> actual 1     1  <NA> 1 columns 2 columns file 2     2  <NA> 1 columns 4 columns row 3     3  <NA> 1 columns 2 columns col 4     4  <NA> 1 columns 6 columns expected 5     5  <NA> 1 columns 5 columns actual # ... with 1 more variables: file <chr>
... ................. ... ................................. ........ ................................. ...... ................................. .... ................................. ... ................................. ... ................................. ........ ................................. ...... .......................................
See problems(...) for more details.

Warning message:
In rbind(names(probs), probs_f) :
  number of columns of result is not a multiple of vector length (arg 1)
> colnames(dat0) <- tolower(colnames(dat0))
> #' ## Create the groups of exact column names for this dataset
> #' 
> #' Any vector in `metadata.R` that is composed of regexps should get
> #' resolved here to a vector of literal names using this expression as
> #' an example:
> #' 
> carepatos <- grepor(dat0,garepatos);
> 
> #' If you need to modify lists of column names using `gsub()` or if you
> #' need to dynamically generate lists of column names using something
> #' other than `grepor()` put the code for doing so here. Might want to
> #' find columns with all/almost-all missing values, or ones with a value that
> #' is always the same for all rows.
> 
> 
> 
> #' ## Convert columns
> #' 
> #' Create copy of original dataset
> dat1 <- dat0;
> #' Convert appropriate columns to factor
> # Example only, doesn't run, you need to actually populate `cfactr` with
> # names of columns for it to work
> #dat1[,cfactr] <- sapply(dat1[,cfactr],factor);
> 
> #' Do likewise for dates, factors, maybe logicals, maybe numerics
> 
> 
> 
> #' For each column in `chavepatos` create a column that is true only 
> #' if that column is true and the corresponding column in `carepatos`
> #' is false. Hint: use `mapply()` or `sapply()` for this and replace
> #' the original `chavepatos` columns with these
> 
> 
> 
> #' Create binned versions of certain numeric vars.
> dat1[,paste0('a_bin_',cnum2bin)] <- sapply(dat1[,cnum2bin],function(ii){
+   qii <- c(0,quantile(ii,seq(.25,.5,.75)),Inf);
+   cut(ii,breaks = qii);
+ })
Error: Columns `income_final$`, `age_at_time_surg$`, `bmi$` not found
Execution halted
